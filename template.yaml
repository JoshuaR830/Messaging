AWSTemplateFormatVersion: 2010-09-09
Resources:

  ApiGatewayAccount:
      Type: AWS::ApiGateway::Account
      Properties:
        CloudWatchRoleArn: !GetAtt ApiGatewayLoggingRole.Arn

  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  MessagingApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      ApiKeySelectionExpression: $request.header.x-api-key
      Description: A websocket API to allow users to send and receive messages
      Name: MessagingApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  MessagingApiOnConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MessagingApi
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt MessagingApiRole.Arn
      Description: On connect integrate with the connection lambda
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessagingOnConnectLambda.Arn}/invocations'

  MessagingApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MessagingApi
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt MessagingApiRole.Arn
      Description: Lambda integration
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessagingLambda.Arn}/invocations'

  MessagingApiOnDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MessagingApi
      ConnectionType: INTERNET
      CredentialsArn: !GetAtt MessagingApiRole.Arn
      Description: On disconnect integrate with the disconnect lambda
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessagingOnDisconnectLambda.Arn}/invocations'
  
  MessagingApiOnConnectionRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn:
      - MessagingApiOnConnectIntegration
    Properties:
      ApiId: !Ref MessagingApi
      AuthorizationType: NONE
      RouteKey: $connect
      Target: !Join
        - /
        - - integrations
          - !Ref MessagingApiOnConnectIntegration
  
  MessagingApiRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn:
      - MessagingApiIntegration
    Properties:
      ApiId: !Ref MessagingApi
      AuthorizationType: NONE
      RouteKey: $default
      Target: !Join
        - /
        - - integrations
          - !Ref MessagingApiIntegration

  MessagingApiOnDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn:
      - MessagingApiOnDisconnectIntegration
    Properties:
      ApiId: !Ref MessagingApi
      AuthorizationType: NONE
      RouteKey: $disconnect
      Target: !Join
        - /
        - - integrations
          - !Ref MessagingApiOnDisconnectIntegration

  MessagingRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: A REST API for requests that don't require websocket integrations
      EndpointConfiguration:
        Types:
          - EDGE
      Name: MessagingRestApi

  MessagingFriendsRestApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: MessagingFriendsLambda
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'
 
  MessagingFriendsInfoRestApiPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: MessagingFriendsInfoLambda
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'

  MessagingFriendsRestApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MessagingRestApi.RootResourceId
      PathPart: 'friends'
      RestApiId: !Ref MessagingRestApi

  MessagingFriendsInfoRestApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MessagingRestApi.RootResourceId
      PathPart: 'friends-info'
      RestApiId: !Ref MessagingRestApi

  MessagingFriendsRestApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt MessagingApiRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessagingFriendsLambda.Arn}/invocations'
      ResourceId: !Ref MessagingFriendsRestApiResource
      RestApiId: !Ref MessagingRestApi

  MessagingFriendsInfoRestApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        ConnectionType: INTERNET
        Credentials: !GetAtt MessagingApiRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MessagingFriendsInfoLambda.Arn}/invocations'
      ResourceId: !Ref MessagingFriendsInfoRestApiResource
      RestApiId: !Ref MessagingRestApi

  MessagingRestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: MessagingFriendsRestApiMethod
    Properties:
      Description: Messsaging REST API deployment
      RestApiId: !Ref MessagingRestApi

  MessagingRestApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref MessagingRestApiDeployment
      RestApiId: !Ref MessagingRestApi
      StageName: messaging-rest

  MessagingOnConnectLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: code-for-lambda-functions
        S3Key: MessagingOnConnectLambdaCode
      Description: A lambda function to deal with user connections
      FunctionName: MessagingOnConnectLambda
      Handler: OnConnectionLambda::OnConnectionLambda.Function::FunctionHandler
      Role: !GetAtt MessagingLambdaFunctionRole.Arn
      Runtime: dotnetcore3.1
      Timeout: 60

  MessagingFriendsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: code-for-lambda-functions
        S3Key: MessagingFriendsLambdaCode
      Description: A lambda function to get a list of friends
      FunctionName: MessagingFriendsLambda
      Handler: FriendsLambda::FriendsLambda.Function::FunctionHandler
      Role: !GetAtt MessagingLambdaFunctionRole.Arn
      Runtime: dotnetcore3.1
      Timeout: 60

  MessagingFriendsInfoLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: code-for-lambda-functions
        S3Key: MessagingFriendsInfoLambdaCode
      Description: A lambda function to get a list of friends
      FunctionName: MessagingFriendsInfoLambda
      Handler: FriendsInfoLambda::FriendsInfoLambda.Function::FunctionHandler
      Role: !GetAtt MessagingLambdaFunctionRole.Arn
      Runtime: dotnetcore3.1
      Timeout: 60

  MessagingLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: code-for-lambda-functions
        S3Key: MessagingLambdaCode
      Description: A lambda function to save messages to a table
      FunctionName: MessagingLambda
      Handler: MessagingLambda::MessagingLambda.Function::FunctionHandler
      Role: !GetAtt MessagingLambdaFunctionRole.Arn
      Runtime: dotnetcore3.1
      Timeout: 60

  MessagingOnDisconnectLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: code-for-lambda-functions
        S3Key: MessagingOnDisconnectLambdaCode
      Description: A lambda function to remove a connection
      FunctionName: MessagingOnDisconnectLambda
      Handler: OnDisconnectLambda::ONDisconnectLambda.Function::FunctionHandler
      Role: !GetAtt MessagingLambdaFunctionRole.Arn
      Runtime: dotnetcore3.1
      Timeout: 60

  MessagingOnConnectLambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: MessagingOnConnectLambda
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'

  MessagingFriendsLambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: MessagingFriendsLambda
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'

  MessagingFriendsInfoLambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: MessagingFriendsInfoLambda
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'
  
  MessagingLambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: MessagingLambda
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'

  MessagingOnDisconnectLambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: MessagingOnDisconnectLambda
      Principal: 'apigateway.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'

  MessagingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "MessageId"
          AttributeType: "S"
      BillingMode: PROVISIONED
      KeySchema:
        -
          AttributeName: "MessageId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      TableName: "MessagingTable"

  EmailAddressToUserMappingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "Email"
          AttributeType: "S"
      BillingMode: PROVISIONED
      KeySchema:
        -
          AttributeName: "Email"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "EmailAddressToUserMappingTable"

  MessagingConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "UserId"
          AttributeType: "S"
        -
          AttributeName: "ConnectionId"
          AttributeType: "S"
      BillingMode: PROVISIONED
      GlobalSecondaryIndexes:
        -
          IndexName: ConnectionId
          KeySchema:
            -
              AttributeName: "ConnectionId"
              KeyType: "HASH"
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      KeySchema:
        -
          AttributeName: "UserId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "MessagingConnectionsTable"

  MessagingUserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "UserId"
          AttributeType: "S"
      BillingMode: PROVISIONED
      KeySchema:
        -
          AttributeName: "UserId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: MessagingUserTable

  MessagingApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Description: IAM role for messaging api
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: 'Allow'
                Action: 
                  - 'lambda:*'
                Resource:
                  - !GetAtt MessagingLambda.Arn
                  - !GetAtt MessagingFriendsLambda.Arn
                  - !GetAtt MessagingFriendsInfoLambda.Arn
                  - !GetAtt MessagingOnConnectLambda.Arn
                  - !GetAtt MessagingOnDisconnectLambda.Arn
      
  MessagingLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: IAM role for messaging function
      Path: '/'
      Policies:
        - PolicyName: AWSLambdaBasicExecutionrole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: ReadWriteTable
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                Resource:
                  - 'arn:aws:dynamodb:*:*:table/MessagingTable'
                  - 'arn:aws:dynamodb:*:*:table/MessagingUserTable'
                  - 'arn:aws:dynamodb:*:*:table/EmailAddressToUserMappingTable'
                  - 'arn:aws:dynamodb:*:*:table/MessagingConnectionsTable'
                  - 'arn:aws:dynamodb:*:*:table/MessagingConnectionsTable/index/ConnectionId'
        - PolicyName: DeleteConnection
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'dynamodb:DeleteItem'
                Resource:
                  - 'arn:aws:dynamodb:*:*:table/MessagingConnectionsTable'
        - PolicyName: ExecuteApi
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'execute-api:ManageConnections'
                Resource: 
                  - 'arn:aws:execute-api:*:*:*/@connections/*'
        - PolicyName: ApiGatewayPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:InvokeFunction'
                Resource: '*'